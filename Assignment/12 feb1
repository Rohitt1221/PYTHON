Question 1

Question 1: What is an exception in python? Write the difference between Exceptions and syntax errors.
Answer : An exception is an event, which occurs during the execution of a program that disrupts the normal flow of the program's instructions.
In general, when a Python script encounters a situation that it cannot cope with, it raises an exception.
Difference in syntax error and exception :
Errors cannot be handled, while Python exceptions can be handled at the run time.
An error can be a syntax (parsing) error, while there can be many types of exceptions that could occur during the execution and are not unconditionally inoperable.
# Example of exception
logging.info('This is Question 1 , Example 1')
a = 23
a/0 #Division by zero is an exception
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
Cell In[7], line 4
      2 logging.info('This is Question 1 , Example 1')
      3 a = 23
----> 4 a/0 #Division by zero is an exception

ZeroDivisionError: division by zero
# Example of syntax error
a = 2
b = 3
print(a b) #incorrect syntax here will raise syntax error
  Cell In[3], line 5
    print(a b) #incorrect syntax here will raise syntax error
          ^
SyntaxError: invalid syntax. Perhaps you forgot a comma?

Question 2

Question 2: What happens if exception is not handled? Explain with an example.
Answer : If Exception is not handled the code below the exception will not execute at all. It will stop the program at exception.
logging.info('This is Question 2 start')
a = 56
print(a/0) # This will cause Zero Division Error
print(a+23) # None of these code and below lines will not excute because exception was not handled
print('This will not execute') # Will not execute because exception not handled
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
Cell In[8], line 3
      1 logging.info('This is Question 2 start')
      2 a = 56
----> 3 print(a/0) # This will cause Zero Division Error
      4 print(a+23) # None of these code and below lines will not excute because exception was not handled
      5 print('This will not execute') # Will not execute because exception not handled

ZeroDivisionError: division by zero

Question 3

Question 3: Which Python Statements are used to catch and handle exceptions? Explain with an example.
Answer : The try and except block in Python is used to catch and handle exceptions.
# I'm Creating a file example reading exception handling
logging.info('This is Start of Question 3')
try:
    # This code will be tried for execution
    with open('sample.txt','r') as f:
        print(f.read())
        logging.info('Try block from question 3 executed')

except Exception as e:
    # Exception will be caught here and message will display
    print('There is exception in this code:',e)
    logging.exception('Except block from Question 3 executed')
finally:
    # This code will execute regardless wether try block executes or not
    a = 23
    b = 45
    print(f'a={a}, b= {b}, a*b ={a*b}')
    logging.info('Finally Block from Question 3 executed')
There is exception in this code: [Errno 2] No such file or directory: 'sample.txt'
a=23, b= 45, a*b =1035

Question 4

Question 4 : Explain with an example:
Try and else
finally
raise
Answer :
Try and else : Try block will execute if no exceptions. If no exceptions only then else block is executed. If exception occured except block will get executed
# creating a custom function for division with Try, Except ,Else blocks
def divide(a,b):
    """
    This is division function with excption handling
    """
    logging.info('This is Start of function divide')
    try:
        # Try block will execute if there is no exception
        result = a/b
        print('Try Block Executed.')
        logging.info('Try Block executed')
    except Exception as e:
        # Except block will execute if exception found
        print('Exception occured : ',e)
        logging.exception('Except block executed')
    else:
        # This block will execute only if try block executed
        print('Else Block Executed')
        logging.info('Else Block executed')
        return result
# Test Case 1 : Both are numbers excluding 0
divide(5,4)
Try Block Executed.
Else Block Executed
1.25
# Test case 2 : Numerator 0 , Denominator non-zero
divide(0,6)
Try Block Executed.
Else Block Executed
0.0
# Test Case 3 : Zero in denominator
divide(1002,0)
Exception occured :  division by zero
# Test Case 3 : String entered in any one
divide('1234',123)
Exception occured :  unsupported operand type(s) for /: 'str' and 'int'
Finally : This code block will always execute .Regardless wether try, except, else blocks are executed
logging.info('Explaining Finally block code of Question 3')
try:
    # Try block executes if no exception occurs
    a = 1
    b = '23'
    c = a + b
    print(c)
    logging.info('Try Block executed')
except Exception as e:
    # Except block will execute if exception occurs
    print('Exception Occured :',e)
    logging.exception('Except block executed')
finally:
    # Finally Block will always execute regardless of exception found or not
    print('This Finally Block will always be executed')
    logging.info('Finally Block executed')
Exception Occured : unsupported operand type(s) for +: 'int' and 'str'
This Finally Block will always be executed
logging.info('Explaining Finally block code of Question 3 Finally example 2')
try:
    # Try block executes if no exception occurs
    a = 1
    b = 54
    c = a + b
    print(c)
    logging.info('Try Block executed')    
except Exception as e:
    # Except block will execute if exception occurs
    print('Exception Occured :',e)
    logging.exception('Except block executed')
finally:
    # Finally Block will always execute regardless of exception found or not
    print('This Finally Block will always be executed')
    logging.info('Finally block executed')
55
This Finally Block will always be executed
raise : Python raise Keyword is used to raise exceptions or errors. The raise keyword raises an error and stops the control flow of the program. It is used to bring up the current exception in an exception handler so that it can be handled further up the call stack.
# Take input as mobile number and raise error if it is not 10 digits and numeric
def mob_num():
    logging.info('This is start of mob_num function from Question 3 Raise explaination')
    mob = input('Enter Mobile number : ')
    print('The moblie number entered is',mob)
    # Check if length of mobile number is 10 digits and length is 10 digits
    if len(mob)!=10 or mob.isnumeric()!= True:
        logging.exception('Exception occured invalid mobile number')
        raise Exception('Invalid Mobile number is entered') 
# Case 1 : Entering digits less than 10
mob_num()
The moblie number entered is 12345
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[18], line 2
      1 # Case 1 : Entering digits less than 10
----> 2 mob_num()

Cell In[17], line 9, in mob_num()
      7 if len(mob)!=10 or mob.isnumeric()!= True:
      8     logging.exception('Exception occured invalid mobile number')
----> 9     raise Exception('Invalid Mobile number is entered')

Exception: Invalid Mobile number is entered
# Case 2: Entering 10 digit number but has alphabets
mob_num()
The moblie number entered is 124abcdefg
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[19], line 2
      1 # Case 2: Entering 10 digit number but has alphabets
----> 2 mob_num()

Cell In[17], line 9, in mob_num()
      7 if len(mob)!=10 or mob.isnumeric()!= True:
      8     logging.exception('Exception occured invalid mobile number')
----> 9     raise Exception('Invalid Mobile number is entered')

Exception: Invalid Mobile number is entered
# Case 3 : Entering all 10 digit mob number
mob_num()
The moblie number entered is 1234567890

Question 5

Question 5 : What are custom Exceptions in python ? Why do we need Custom Exceptions? Explain with an Example.
Answer: Built-in exceptions offer information about Python-related problems, and custom exceptions will add information about project-related problems. Example percentage value should always be between 0 to 100
Python detects all the critical errors that occur during Compile-time and Runtime. It stops the program's execution if the error occurs and raises an exception. Some commonly raised Exceptions are ArithmeticError, AttributeError, ImportError, IOError, FileNotFoundError, etc.

Sometimes we must enforce constraints on the values that specific program variables can take or save the program from running into an undesired state. In such situations, Python allows programmers to create User-defined Exceptions. To create a User-defined Exception, we need to create a class directly or indirectly derived from the built-in Exception class.

# Creating a custom class for custom exception
class pcterror(Exception):
    def __init__(self,msg):
        self.msg = msg
# Check if percentage marks of entered is valid or not
# Case 1 : Percentage between 0 and 100
logging.info('Question 5 , case 1 started')
pct = 85
# Below is custom exception which checks if percentage is in between 0 and 100
if pct<0 or pct>100:
    logging.error('Percentage not in range')
    raise pcterror('Invalid percentage entered') 
else:
    print('Percentage marks of student is : ',pct)
    logging.info('No Error occured')
Percentage marks of student is :  85
# Case 2 : Negative Percentage
logging.info('Question 5 , case 2 started')
pct = -20
# Below is custom exception which checks if percentage is in between 0 and 100
if pct<0 or pct>100:
    logging.error('Percentage not in range')
    raise pcterror('Invalid percentage entered') 
else:
    print('Percentage marks of student is : ',pct)
    logging.info('no error occured')
---------------------------------------------------------------------------
pcterror                                  Traceback (most recent call last)
Cell In[7], line 7
      5 if pct<0 or pct>100:
      6     logging.error('Percentage not in range')
----> 7     raise pcterror('Invalid percentage entered') 
      8 else:
      9     print('Percentage marks of student is : ',pct)

pcterror: Invalid percentage entered
# Case 3 : Percentage > 100
logging.info('Question 5 , case 3 started')
pct = 135
# Below is custom exception which checks if percentage is in between 0 and 100
if pct<0 or pct>100:
    logging.error('Percentage not in range')
    raise pcterror('Invalid percentage entered') 
else:
    print('Percentage marks of student is : ',pct)
    logging.info('No error in code')
---------------------------------------------------------------------------
pcterror                                  Traceback (most recent call last)
Cell In[8], line 7
      5 if pct<0 or pct>100:
      6     logging.error('Percentage not in range')
----> 7     raise pcterror('Invalid percentage entered') 
      8 else:
      9     print('Percentage marks of student is : ',pct)

pcterror: Invalid percentage entered

Question 6

Question 6 : Create a custom exception class . Use this class to handle exception
Answer : I'm Creating a custom exception to validate PAN Card number Below are rules
Length of Characters must be 10
First 5 characters string out of which first 3 are random
The fourth character of PAN represents the status of the PAN holder must be from ['P','C','H', 'F', 'A', 'T', 'B', 'L', 'J', 'G']
5th Character must be same as First Letter of surname
Next 4 characters (from 6 to 9) should be number
Last character should be a alphabet
Link for PAN Card Number Rules.pdf)
#Creating a custom exception class to validate PAN Card number

class validatePAN(Exception):
    # This class ValidatePAN is child of Parent class Exception
    def __init__(self, msg):
        self.msg = msg
# Custon Definition to validate pan number
def validate_pan_number(surname,pan):

    logging.info('Validate pan function started')
    
    # Condition 1 Check if Surname is entered alphabetic
    if not surname.isalpha():
        logging.error('Surname error , Surname cannot have numbers')
        raise validatePAN('Surname cannot consist of numbers')
    
    # Condition 2 Check PAN Card Length it must be = 10
    elif len(pan)!=10:
        logging.error('PAN Number length is not equal to 10')
        raise validatePAN('Length of PAN Card should be 10 digits')
    
    # Condition 3 first 3 charaters should be letters
    elif not pan[0:2].isalpha():
        logging.error('First 3 letters of PAN Number are not characters')
        raise validatePAN('First Three characters of Pan Card Must be Letters')
    
    # Condition 4 Fourth letters must belong in ['P','C','H', 'F', 'A', 'T', 'B', 'L', 'J', 'G'] 
    elif pan[3] not in ['P','C','H', 'F', 'A', 'T', 'B', 'L', 'J', 'G']:
        logging.error('PAN Category invalid')
        raise validatePAN("4th Letter must be any of ['P','C','H', 'F', 'A', 'T', 'B', 'L', 'J', 'G']")
    
    # Condition 5 Fifth letter of PAN Card must match with 1st letter of surname 
    # Case Unification done if characters enterd in different case
    elif surname[0].upper()!=pan[4].upper():
        logging.error('1st Letter of Surname and 5th Letter of PAN not matching')
        raise validatePAN("First Digit of surname not matching with 5th Letter of pan")
    
    # Condition 6 Next 4 characters should be numeric 
    elif not pan[5:9].isnumeric():
        logging.error('Characters 6 to 9 not numeric')
        raise validatePAN("Characters from 6 to 9 should be numbers")
    
    # Condition 7 Last Character must be alphabet
    elif not pan[-1].isalpha():
        logging.error('Last character in not an alphabet')
        raise validatePAN("Last Character of PAN must be a Alphabet")
    
    # If all above condition satisfy Pan Number is valid
    else:
        print('PAN Number is valid')
        logging.info('PAN Card number is Valid')
# Test Case 1 : Checking a Valid pan number and surname
logging.info('Test Case 1 , Question 6')
try:
    surname = 'gaikwad'
    pan = 'AAAPG1234F'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except block executed')
PAN Number is valid
# Test case 2 : Entering invalid surname
logging.info('Test Case 2 , Question 6')
try:
    surname = '123skfm'
    pan = 'AAAPG1234F'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except block executed')
Surname cannot consist of numbers
# Test Case 3 : Entering Pan Number Less than 10 numbers
logging.info('Test Case 3 , Question 6')
try:
    surname = 'gaikwad'
    pan = 'AAAPG12'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except block executed')
Length of PAN Card should be 10 digits
# Test Case 4 : Entering Pan Number Less than 10 numbers First 3 letters of pancard is not alphabet
logging.info('Test Case 4 , Question 6')
try:
    surname = 'gaikwad'
    pan = 'A2APG1234F'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except block executed')
First Three characters of Pan Card Must be Letters
# Test Case 4: Letter 4 not belonging from ['P','C','H', 'F', 'A', 'T', 'B', 'L', 'J', 'G']
logging.info('Test Case 4 , Question 6') 
try:
    surname = 'gaikwad'
    pan = 'AAAZG1234F'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except block executed')
4th Letter must be any of ['P','C','H', 'F', 'A', 'T', 'B', 'L', 'J', 'G']
# Test Case 5: First letter of surname and 5th character of PAN Number not matching
logging.info('Test Case 5 , Question 6')
try:
    surname = 'gaikwad'
    pan = 'AAAPX1234F'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except block executed')
First Digit of surname not matching with 5th Letter of pan
# Test Case 6: Characters from 6 to 9 are not numbers
logging.info('Test Case 6 , Question 6')
try:
    surname = 'gaikwad'
    pan = 'AAAPG12N4F'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except block executed')
Characters from 6 to 9 should be numbers
# Test Case 7: Last Character must be Alphabet
logging.info('Test Case 7 , Question 6')
try:
    surname = 'gaikwad'
    pan = 'AAAPG12345'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except Block executed')
Last Character of PAN must be a Alphabet
# Test Case 8 : Random Test case
logging.info('Test Case 8 , Question 6')
try:
    surname ='Naik'
    pan = 'ACXPN4567D'
    validate_pan_number(surname,pan)
    logging.info('Try Block executed')
except validatePAN as e:
    print(e)
    logging.exception('Except Block executed')
PAN Number is valid
